@page "/transactions"
@using InventoryManagement.Application.DTOs.Transaction
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize]
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IHttpClientFactory HttpClientFactory

<h3>Транзакции</h3>

@if (transactions == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Товар ID</th>
                <th>Из локации</th>
                <th>В локацию</th>
                <th>Пользователь ID</th>
                <th>Дата</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.ItemId</td>
                    <td>@transaction.FromLocationId</td>
                    <td>@transaction.ToLocationId</td>
                    <td>@transaction.UserId</td>
                    <td>@transaction.Timestamp</td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Добавить транзакцию</h4>
    <input type="number" @bind="newTransaction.ItemId" placeholder="Товар ID" class="form-control" />
    <input type="number" @bind="newTransaction.FromLocationId" placeholder="Из локации" class="form-control mt-2" />
    <input type="number" @bind="newTransaction.ToLocationId" placeholder="В локацию" class="form-control mt-2" />
    <input type="text" @bind="newTransaction.UserId" placeholder="Пользователь ID" class="form-control mt-2" />
    <input type="datetime-local" @bind="newTransaction.Timestamp" placeholder="Дата" class="form-control mt-2" />
    <button class="btn btn-success mt-2" @onclick="SaveTransaction">Сохранить</button>
    <h4>Экспорт отчёта</h4>
    <button class="btn btn-info" @onclick="@(() => ExportReport("csv"))">📄 Скачать CSV</button>
    <button class="btn btn-success" @onclick="@(() => ExportReport("excel"))">📊 Скачать Excel</button>

}

@code {
    private List<TransactionResponseDTO> transactions = new();
    private TransactionResponseDTO newTransaction = new();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        transactions = await client.GetFromJsonAsync<List<TransactionResponseDTO>>("api/transaction");

        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/inventoryHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<TransactionResponseDTO>("ReceiveUpdate", async (updatedTransaction) =>
        {
            await InvokeAsync(() =>
            {
                var existingTransaction = transactions.FirstOrDefault(t => t.Id == updatedTransaction.Id);
                if (existingTransaction != null)
                {
                    existingTransaction.ItemId = updatedTransaction.ItemId;
                    existingTransaction.FromLocationId = updatedTransaction.FromLocationId;
                    existingTransaction.ToLocationId = updatedTransaction.ToLocationId;
                    existingTransaction.UserId = updatedTransaction.UserId;
                    existingTransaction.Timestamp = updatedTransaction.Timestamp;
                }
                else
                {
                    transactions.Add(updatedTransaction);
                }

                StateHasChanged(); 
            });
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ExportReport(string format)
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        var response = await client.GetAsync($"api/reports/export/{format}");

        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var fileName = format == "csv" ? "transactions.csv" : "transactions.xlsx";
            await JS.InvokeVoidAsync("saveAsFile", fileName, fileBytes);
        }
    }

    private async Task SaveTransaction()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        var response = await client.PostAsJsonAsync("api/transaction", newTransaction);

        if (response.IsSuccessStatusCode)
        {
            newTransaction = new TransactionResponseDTO(); 
        }
    }
}
