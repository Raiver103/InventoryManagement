@page "/locations"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

<h3>Локации</h3>

@if (locations == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Название</th>
                <th>Адрес</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in locations)
            {
                <tr>
                    <td>@location.Id</td>
                    <td>@location.Name</td>
                    <td>@location.Address</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditLocation(location)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => DeleteLocation(location.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Добавить / Редактировать локацию</h4>
    <input type="text" @bind="newLocation.Name" placeholder="Название" class="form-control" />
    <input type="text" @bind="newLocation.Address" placeholder="Адрес" class="form-control mt-2" />
    <button class="btn btn-success mt-2" @onclick="SaveLocation">Сохранить</button>
}

@code {
    private List<LocationResponseDTO> locations; // Используем Response DTO для списка локаций
    private LocationCreateDTO newLocation = new LocationCreateDTO(); // Используем Create DTO для нового/редактируемого объекта

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        // Получаем список локаций с API
        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }

    private async Task SaveLocation()
    {
        Console.WriteLine("SaveLocation вызван"); // Проверка в консоли Blazor
        var client = HttpClientFactory.CreateClient("ApiClient");

        if (newLocation.Id == 0) // Если Id == 0, значит это новая локация
        {
            await client.PostAsJsonAsync("api/location", newLocation);
        }
        else // Если Id уже есть, это обновление локации
        {
            await client.PutAsJsonAsync($"api/location/{newLocation.Id}", newLocation);
        }

        // Сбросить форму после сохранения
        newLocation = new LocationCreateDTO();
        // Обновить список локаций
        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }

    private void EditLocation(LocationResponseDTO location)
    {
        // При редактировании заполняем форму данными существующей локации
        newLocation = new LocationCreateDTO { Id = location.Id, Name = location.Name, Address = location.Address };
    }

    private async Task DeleteLocation(int id)
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        // Отправляем запрос на удаление локации
        await client.DeleteAsync($"api/location/{id}");
        // Обновляем список локаций после удаления
        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }

    private class LocationCreateDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
    }

    private class LocationResponseDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
    }
}
