@page "/locations"
@using InventoryManagement.Application.DTOs.Location
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer

@inject IHttpClientFactory HttpClientFactory

<h3>Локации</h3>

@if (locations == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Название</th>
                <th>Адрес</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var location in locations)
            {
                <tr>
                    <td>@location.Id</td>
                    <td>@location.Name</td>
                    <td>@location.Address</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditLocation(location)">Редактировать</button>
                        <button class="btn btn-danger" @onclick="() => DeleteLocation(location.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Добавить / Редактировать локацию</h4>
    <input type="text" @bind="newLocation.Name" placeholder="Название" class="form-control" />
    <input type="text" @bind="newLocation.Address" placeholder="Адрес" class="form-control mt-2" />
    <button class="btn btn-success mt-2" @onclick="SaveLocation">Сохранить</button>
}

@code {
    private List<LocationResponseDTO> locations;
    private LocationResponseDTO newLocation = new LocationResponseDTO();

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");

        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }

    private async Task SaveLocation()
    {
        Console.WriteLine("SaveLocation вызван"); 
        var client = HttpClientFactory.CreateClient("ApiClient");

        if (newLocation.Id == 0) 
        {
            await client.PostAsJsonAsync("api/location", newLocation);
        }
        else 
        {
            await client.PutAsJsonAsync($"api/location/{newLocation.Id}", newLocation);
        }

 
        newLocation = new LocationResponseDTO();

        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }

    private void EditLocation(LocationResponseDTO location)
    {
        newLocation = new LocationResponseDTO { Id = location.Id, Name = location.Name, Address = location.Address };
    }

    private async Task DeleteLocation(int id)
    {
        var client = HttpClientFactory.CreateClient("ApiClient");

        await client.DeleteAsync($"api/location/{id}");

        locations = await client.GetFromJsonAsync<List<LocationResponseDTO>>("api/location");
    }
}
