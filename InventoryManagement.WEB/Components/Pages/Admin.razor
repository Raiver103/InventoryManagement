@page "/admin" 
@using InventoryManagement.Application.DTOs.User
@using InventoryManagement.Domain.Entities.Auth0
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@inject IHttpClientFactory HttpClientFactory

<h3>Пользователи</h3>

@if (users == null)
{
    <p>Загрузка...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Имя</th>
                <th>Фамилия</th>
                <th>Роль</th>
                <th>Email</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Role</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditUser(user)">Редактировать</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Добавить / Редактировать пользователя</h4>
    <input type="text" @bind="newUser.FirstName" placeholder="Имя" class="form-control" />
    <input type="text" @bind="newUser.LastName" placeholder="Фамилия" class="form-control mt-2" />
    <input type="email" @bind="newUser.Email" placeholder="Email" class="form-control mt-2" />
    <select class="form-control mt-2" @bind="newUser.Role">
        <option value="Employee">Сотрудник</option>
        <option value="Admin">Администратор</option>
        <option value="Manager">Менеджер</option>
    </select>

    @if (string.IsNullOrWhiteSpace(editingUserId))
    {
        <input type="password" @bind="newUser.Password" placeholder="Пароль" class="form-control mt-2" />
    }

    <button class="btn btn-success mt-2" @onclick="SaveUser">Сохранить</button>
    <button class="btn btn-secondary mt-2" @onclick="CancelEdit">Отмена</button>
}

@code {
    private List<UserResponseDTO> users = new();
    private CreateUserRequest newUser = new();
    private string? editingUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        users = await client.GetFromJsonAsync<List<UserResponseDTO>>("api/auth0/get-users") ?? new();
    }

    private async Task SaveUser()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        HttpResponseMessage response;

        if (string.IsNullOrWhiteSpace(editingUserId))
        {
            response = await client.PostAsJsonAsync("api/auth0/create-user", newUser);
        }
        else
        {
            var updateUser = new UpdateUserRequest
                {
                    FirstName = newUser.FirstName,
                    LastName = newUser.LastName,
                    Role = newUser.Role,
                    Email = newUser.Email
                };

            response = await client.PatchAsJsonAsync($"api/auth0/update-user/{editingUserId}", updateUser);
        }

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Ошибка API: {response.StatusCode}, {await response.Content.ReadAsStringAsync()}");
        }

        editingUserId = null;
        newUser = new CreateUserRequest();
        await LoadUsers();
    }

    private void EditUser(UserResponseDTO user)
    {
        editingUserId = user.Id;
        newUser = new CreateUserRequest
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                Role = user.Role ?? "Employee",
                Email = user.Email
            };
    }

    private async Task DeleteUser(string id)
    {
        Console.WriteLine($"Удаление пользователя с ID: {id}");
        if (string.IsNullOrWhiteSpace(id)) return;

        var encodedId = Uri.EscapeDataString(id); // Кодируем ID
        var client = HttpClientFactory.CreateClient("ApiClient");
        var response = await client.DeleteAsync($"api/auth0/delete-user/{encodedId}");

        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Ошибка удаления: {response.StatusCode}, {errorMessage}");
        }

        await LoadUsers();
    }


    private void CancelEdit()
    {
        editingUserId = null;
        newUser = new CreateUserRequest();
    } 
}